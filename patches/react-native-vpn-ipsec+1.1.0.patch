diff --git a/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpn.swift b/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpn.swift
index 977e245..da205b5 100644
--- a/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpn.swift
+++ b/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpn.swift
@@ -101,7 +101,8 @@ class RNIpSecVpn: RCTEventEmitter {
 
         // Register to be notified of changes in the status. These notifications only work when app is in foreground.
         NotificationCenter.default.addObserver(forName: NSNotification.Name.NEVPNStatusDidChange, object : nil , queue: nil) {
-            notification in let nevpnconn = notification.object as! NEVPNConnection
+            notification in
+            let nevpnconn = notification.object as! NEVPNConnection
             self.sendEvent(withName: "stateChanged", body: [ "state" : checkNEStatus(status: nevpnconn.status) ])
         }
         
@@ -111,19 +112,19 @@ class RNIpSecVpn: RCTEventEmitter {
     
     
     @objc
-    func connect(_ name: NSString, address: NSString, username: NSString, password: NSString, secret: NSString, disconnectOnSleep: Bool=false, findEventsWithResolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock )->Void{
+    func connect(_ config: NSDictionary, address: NSString, username: NSString, password: NSString, secret: NSString, disconnectOnSleep: Bool=false, findEventsWithResolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock )->Void{
         
-        loadReference(name, address: address, username: username, password: password,  secret: secret, disconnectOnSleep: disconnectOnSleep, findEventsWithResolver: findEventsWithResolver, rejecter: rejecter, isPrepare: false)
+        loadReference(config, address: address, username: username, password: password,  secret: secret, disconnectOnSleep: disconnectOnSleep, findEventsWithResolver: findEventsWithResolver, rejecter: rejecter, isPrepare: false)
     }
     
     @objc
-    func saveConfig(_ name: NSString, address: NSString, username: NSString, password: NSString,  secret: NSString, findEventsWithResolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock )->Void{
+    func saveConfig(_ config: NSDictionary, address: NSString, username: NSString, password: NSString,  secret: NSString, findEventsWithResolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock )->Void{
         
-        loadReference(name, address: address, username: username, password: password,   secret: secret, disconnectOnSleep: false, findEventsWithResolver: findEventsWithResolver, rejecter: rejecter, isPrepare: true)
+        loadReference(config, address: address, username: username, password: password,   secret: secret, disconnectOnSleep: false, findEventsWithResolver: findEventsWithResolver, rejecter: rejecter, isPrepare: true)
     }
     
     @objc
-    func loadReference(_ name: NSString, address: NSString, username: NSString, password: NSString,  secret: NSString, disconnectOnSleep: Bool, findEventsWithResolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock,isPrepare:Bool) -> Void {
+    func loadReference(_ config: NSDictionary, address: NSString, username: NSString, password: NSString,  secret: NSString, disconnectOnSleep: Bool, findEventsWithResolver: @escaping RCTPromiseResolveBlock, rejecter: @escaping RCTPromiseRejectBlock,isPrepare:Bool) -> Void {
         
         let kcs = KeychainService()
         if !isPrepare{
@@ -134,22 +135,117 @@ class RNIpSecVpn: RCTEventEmitter {
             if error != nil {
                 print("VPN Preferences error: 1")
             } else {
+                if let type = config["type"] as? String{
+                    if "ipsec" == type{
+                        let p = NEVPNProtocolIPSec()
+                        p.username = username as String
+                        p.serverAddress = address as String
+                        if let authenticationMethod  = config["authenticationMethod"] as? NSInteger {
+                            p.authenticationMethod  = NEVPNIKEAuthenticationMethod.init(rawValue: authenticationMethod) ?? .none
+                        }
+                        else{
+                            p.authenticationMethod = NEVPNIKEAuthenticationMethod.none
+                        }
+                        
+                        
+                        
+                        kcs.save(key: "secret", value: secret as String)
+                        kcs.save(key: "password", value: password as String)
+                        
+                        p.sharedSecretReference = kcs.load(key: "secret")
+                        p.passwordReference = kcs.load(key: "password")
+                        
+                        p.useExtendedAuthentication = true
+                        p.disconnectOnSleep = disconnectOnSleep
+                        
+                        self.vpnManager.protocolConfiguration = p
+                    }
+                    else if "ikev2" == type{
+                        let p = NEVPNProtocolIKEv2()
+                        
+                        p.username = username as String
+                        p.serverAddress = address as String
+                        if let authenticationMethod  = config["authenticationMethod"] as? NSInteger {
+                            p.authenticationMethod  = NEVPNIKEAuthenticationMethod.init(rawValue: authenticationMethod) ?? .none
+                            
+                        }
+                        else{
+                            p.authenticationMethod = NEVPNIKEAuthenticationMethod.none
+                        }
+                        
+                        if password.length > 0 {
+                            kcs.save(key: "password", value: password as String)
+                            p.passwordReference = kcs.load(key: "password")
+                        }
+                        if secret.length  > 0 {
+                            kcs.save(key: "secret", value: secret as String)
+                            p.sharedSecretReference = kcs.load(key: "secret")
+                        }
+                        
+                        if let remoteIdentifier = config.value(forKey: "remoteIdentifier") as? String{
+                            p.remoteIdentifier = remoteIdentifier
+                        }
+                        if let localIdentifier = config.value(forKey: "localIdentifier") as? String{
+                            p.localIdentifier = localIdentifier
+                        }
+                        
+                        if let certificateType = config.value(forKey: "certificateType") as? Int{
+                            p.certificateType = .init(rawValue: certificateType) ?? .RSA
+                        }
+                        
+                        if let identityData = config.value(forKey: "identityData") as? String,identityData.count > 0{
+                            p.identityData = identityData.data(using: .utf8)
+                        }
+                        
+                        if let ikeSecurityAssociationParameters = config.value(forKey: "ikeSecurityAssociationParameters") as? NSDictionary ,
+                           let encryptionAlgorithm = ikeSecurityAssociationParameters["encryptionAlgorithm"] as? Int,
+                           let integrityAlgorithm = ikeSecurityAssociationParameters["integrityAlgorithm"] as? Int,
+                           let diffieHellmanGroup = ikeSecurityAssociationParameters["diffieHellmanGroup"] as? Int,
+                           let lifetimeMinutes = ikeSecurityAssociationParameters["lifetimeMinutes"] as? Int{
+                            
+                            p.ikeSecurityAssociationParameters.encryptionAlgorithm = .init(rawValue: encryptionAlgorithm) ?? .algorithmAES256
+                            
+                            p.ikeSecurityAssociationParameters.integrityAlgorithm  = .init(rawValue: integrityAlgorithm) ?? .SHA256
+                            
+                            p.ikeSecurityAssociationParameters.diffieHellmanGroup  = .init(rawValue: diffieHellmanGroup) ?? .group14
+                            
+                            p.ikeSecurityAssociationParameters.lifetimeMinutes  = Int32(lifetimeMinutes)
+
+                            
+                        }
+                        
+                        if let childSecurityAssociationParameters = config.value(forKey: "childSecurityAssociationParameters") as? NSDictionary ,
+                           let encryptionAlgorithm = childSecurityAssociationParameters["encryptionAlgorithm"] as? Int,
+                           let integrityAlgorithm = childSecurityAssociationParameters["integrityAlgorithm"] as? Int,
+                           let diffieHellmanGroup = childSecurityAssociationParameters["diffieHellmanGroup"] as? Int,
+                           let lifetimeMinutes = childSecurityAssociationParameters["lifetimeMinutes"] as? Int{
+                            
+                            p.childSecurityAssociationParameters.encryptionAlgorithm = .init(rawValue: encryptionAlgorithm) ?? .algorithmAES256
+                            
+                            p.childSecurityAssociationParameters.integrityAlgorithm  = .init(rawValue: integrityAlgorithm) ?? .SHA256
+                            
+                            p.childSecurityAssociationParameters.diffieHellmanGroup  = .init(rawValue: diffieHellmanGroup) ?? .group14
+                            
+                            p.childSecurityAssociationParameters.lifetimeMinutes  = Int32(lifetimeMinutes)
+
+                            
+                        }
+
+                        p.useExtendedAuthentication = true
+                        p.disconnectOnSleep = disconnectOnSleep
+                        self.vpnManager.protocolConfiguration = p
+                        
+                    }
+                    
+                    
+                    
+                    
+                }
                 
-                let p = NEVPNProtocolIPSec()
-                p.username = username as String
-                p.serverAddress = address as String
-                p.authenticationMethod = NEVPNIKEAuthenticationMethod.sharedSecret
                 
-                kcs.save(key: "secret", value: secret as String)
-                kcs.save(key: "password", value: password as String)
                 
-                p.sharedSecretReference = kcs.load(key: "secret")
-                p.passwordReference = kcs.load(key: "password")
                 
-                p.useExtendedAuthentication = true
-                p.disconnectOnSleep = disconnectOnSleep
   
-                self.vpnManager.protocolConfiguration = p
                 
                 var rules = [NEOnDemandRule]()
                 let rule = NEOnDemandRuleConnect()
diff --git a/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpnBridge.m b/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpnBridge.m
index 9f2982c..8d4cbae 100644
--- a/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpnBridge.m
+++ b/node_modules/react-native-vpn-ipsec/ios/RNIpSecVpnBridge.m
@@ -10,13 +10,21 @@
 #import "React/RCTEventEmitter.h"
 
 @interface RCT_EXTERN_MODULE(RNIpSecVpn, RCTEventEmitter)
+
 RCT_EXTERN_METHOD(supportedEvents)
+
 RCT_EXTERN_METHOD(prepare:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
-RCT_EXTERN_METHOD(connect:(NSString *)name address:(NSString *)address username:(NSString *)username password:(NSString *)password secret:(NSString *)secret disconnectOnSleep:(BOOL)disconnectOnSleep findEventsWithResolver:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
-RCT_EXTERN_METHOD(saveConfig:(NSString *)name address:(NSString *)address username:(NSString *)username password:(NSString *)password secret:(NSString *)secret findEventsWithResolver:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
+
+RCT_EXTERN_METHOD(connect:(NSDictionary *)config address:(NSString *)address username:(NSString *)username password:(NSString *)password secret:(NSString *)secret disconnectOnSleep:(BOOL)disconnectOnSleep findEventsWithResolver:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
+
+RCT_EXTERN_METHOD(saveConfig:(NSDictionary *)config address:(NSString *)address username:(NSString *)username password:(NSString *)password secret:(NSString *)secret findEventsWithResolver:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
+
 RCT_EXTERN_METHOD(disconnect:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
+
 RCT_EXTERN_METHOD(getCurrentState:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
+
 RCT_EXTERN_METHOD(getConnectionTimeSecond:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
+
 RCT_EXTERN_METHOD(getCharonErrorState:(RCTPromiseResolveBlock)findEventsWithResolver rejecter:(RCTPromiseRejectBlock)rejecter)
 
 @end
diff --git a/node_modules/react-native-vpn-ipsec/src/index.d.ts b/node_modules/react-native-vpn-ipsec/src/index.d.ts
index 2407d87..07c2719 100644
--- a/node_modules/react-native-vpn-ipsec/src/index.d.ts
+++ b/node_modules/react-native-vpn-ipsec/src/index.d.ts
@@ -1,41 +1,109 @@
 import { EmitterSubscription } from 'react-native';
 export declare enum VpnState {
-  invalid = 0,
-  disconnected = 1,
-  connecting = 2,
-  connected = 3,
-  reasserting = 4,
-  disconnecting = 5,
+    invalid = 0,
+    disconnected = 1,
+    connecting = 2,
+    connected = 3,
+    reasserting = 4,
+    disconnecting = 5
 }
 export declare enum CharonErrorState {
-  NO_ERROR = 0,
-  AUTH_FAILED = 1,
-  PEER_AUTH_FAILED = 2,
-  LOOKUP_FAILED = 3,
-  UNREACHABLE = 4,
-  GENERIC_ERROR = 5,
-  PASSWORD_MISSING = 6,
-  CERTIFICATE_UNAVAILABLE = 7,
-  UNDEFINED = 8,
+    NO_ERROR = 0,
+    AUTH_FAILED = 1,
+    PEER_AUTH_FAILED = 2,
+    LOOKUP_FAILED = 3,
+    UNREACHABLE = 4,
+    GENERIC_ERROR = 5,
+    PASSWORD_MISSING = 6,
+    CERTIFICATE_UNAVAILABLE = 7,
+    UNDEFINED = 8
 }
 export declare const STATE_CHANGED_EVENT_NAME: string;
 export declare const removeOnStateChangeListener: (stateChangedEvent: EmitterSubscription) => void;
-export declare const onStateChangedListener: (
-  callback: (state: { state: VpnState; charonState: CharonErrorState }) => void
-) => EmitterSubscription;
+export declare const onStateChangedListener: (callback: (state: {
+    state: VpnState;
+    charonState: CharonErrorState;
+}) => void) => EmitterSubscription;
 export declare const prepare: () => Promise<void>;
-export declare const connect: (
-  name: string,
-  address: string,
-  username: string,
-  password: string,
-  secret: string,
-  disapleOnSleep: boolean
-) => Promise<void>;
-export declare const saveConfig: (name: string, address: string, username: string, password: string, secret: string) => Promise<void>;
+export declare enum NEVPNIKEv2CertificateType {
+    RSA = 1,
+    ECDSA256 = 2,
+    ECDSA384 = 3,
+    ECDSA521 = 4,
+    ed25519 = 5
+}
+export interface NEVPNIKEv2SecurityAssociationParameters {
+    /**
+     *case algorithmDES = 1
+    case algorithm3DES = 2
+    case algorithmAES128 = 3
+    case algorithmAES256 = 4
+    case algorithmAES128GCM = 5
+    case algorithmAES256GCM = 6
+    case algorithmChaCha20Poly1305 = 7
+     *
+     * @type {number}
+     * @memberof NEVPNIKEv2SecurityAssociationParameters
+     */
+    encryptionAlgorithm: number;
+    /**
+     *case SHA96 = 1
+  case SHA160 = 2
+  case SHA256 = 3
+  case SHA384 = 4
+  case SHA512 = 5
+     *
+     * @type {number}
+     * @memberof NEVPNIKEv2SecurityAssociationParameters
+     */
+    integrityAlgorithm: number;
+    /**
+     *case groupInvalid = 0
+  case group1 = 1
+  case group2 = 2
+  case group5 = 5
+  case group14 = 14
+  case group15 = 15
+  case group16 = 16
+  case group17 = 17
+  case group18 = 18
+  case group19 = 19
+  case group20 = 20
+  case group21 = 21
+  case group31 = 31
+     *
+     * @type {number}
+     * @memberof NEVPNIKEv2SecurityAssociationParameters
+     */
+    diffieHellmanGroup: number;
+    lifetimeMinutes: number;
+}
+export interface VPNConfigOptions {
+    name: string;
+    type: "ipsec" | "ikev2";
+    /**
+     * case none = 0
+      case certificate = 1
+      case sharedSecret = 2
+     */
+    authenticationMethod: number;
+    address: string;
+    username: string;
+    password: string;
+    secret?: string;
+    identityData?: string;
+    remoteIdentifier?: string;
+    localIdentifier?: string;
+    certificateType?: NEVPNIKEv2CertificateType;
+    ikeSecurityAssociationParameters?: NEVPNIKEv2SecurityAssociationParameters;
+    childSecurityAssociationParameters?: NEVPNIKEv2SecurityAssociationParameters;
+}
+export declare const connect: (config: VPNConfigOptions, address: string, username: string, password: string, secret: string, disapleOnSleep: boolean) => Promise<void>;
+export declare const saveConfig: (config: VPNConfigOptions, address: string, username: string, password: string, secret: string) => Promise<void>;
 export declare const getCurrentState: () => Promise<VpnState>;
 export declare const getConnectionTimeSecond: () => Promise<Number>;
 export declare const getCharonErrorState: () => Promise<CharonErrorState>;
 export declare const disconnect: () => Promise<void>;
 declare const _default: any;
 export default _default;
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-vpn-ipsec/src/index.js b/node_modules/react-native-vpn-ipsec/src/index.js
index f88e4eb..9aa48ed 100644
--- a/node_modules/react-native-vpn-ipsec/src/index.js
+++ b/node_modules/react-native-vpn-ipsec/src/index.js
@@ -1,67 +1,86 @@
 import { NativeEventEmitter, NativeModules, Platform } from 'react-native';
+// the generic VPN state for all platforms.
 export var VpnState;
 (function (VpnState) {
-  if (Platform.OS == 'ios') {
-    VpnState[(VpnState['invalid'] = 0)] = 'invalid';
-    VpnState[(VpnState['disconnected'] = 1)] = 'disconnected';
-    VpnState[(VpnState['connecting'] = 2)] = 'connecting';
-    VpnState[(VpnState['connected'] = 3)] = 'connected';
-    VpnState[(VpnState['reasserting'] = 4)] = 'genericError';
-    VpnState[(VpnState['disconnecting'] = 5)] = 'disconnecting';
-  } else {
-    //     disconnected,
-    // connecting,
-    // connected,
-    // disconnecting,
-    // genericError,
-    VpnState[(VpnState['disconnected'] = 0)] = 'disconnected';
-    VpnState[(VpnState['connecting'] = 1)] = 'connecting';
-    VpnState[(VpnState['connected'] = 2)] = 'connected';
-    VpnState[(VpnState['disconnecting'] = 3)] = 'disconnecting';
-    VpnState[(VpnState['genericError'] = 4)] = 'genericError';
-    VpnState[(VpnState['invalid'] = 5)] = 'invalid';
-  }
+    VpnState[VpnState["invalid"] = 0] = "invalid";
+    VpnState[VpnState["disconnected"] = 1] = "disconnected";
+    VpnState[VpnState["connecting"] = 2] = "connecting";
+    VpnState[VpnState["connected"] = 3] = "connected";
+    VpnState[VpnState["reasserting"] = 4] = "reasserting";
+    VpnState[VpnState["disconnecting"] = 5] = "disconnecting";
 })(VpnState || (VpnState = {}));
-
+/// the error state from `VpnStateService`.
+/// only available for Android device.
 export var CharonErrorState;
 (function (CharonErrorState) {
-  CharonErrorState[(CharonErrorState['NO_ERROR'] = 0)] = 'NO_ERROR';
-  CharonErrorState[(CharonErrorState['AUTH_FAILED'] = 1)] = 'AUTH_FAILED';
-  CharonErrorState[(CharonErrorState['PEER_AUTH_FAILED'] = 2)] = 'PEER_AUTH_FAILED';
-  CharonErrorState[(CharonErrorState['LOOKUP_FAILED'] = 3)] = 'LOOKUP_FAILED';
-  CharonErrorState[(CharonErrorState['UNREACHABLE'] = 4)] = 'UNREACHABLE';
-  CharonErrorState[(CharonErrorState['GENERIC_ERROR'] = 5)] = 'GENERIC_ERROR';
-  CharonErrorState[(CharonErrorState['PASSWORD_MISSING'] = 6)] = 'PASSWORD_MISSING';
-  CharonErrorState[(CharonErrorState['CERTIFICATE_UNAVAILABLE'] = 7)] = 'CERTIFICATE_UNAVAILABLE';
-  CharonErrorState[(CharonErrorState['UNDEFINED'] = 8)] = 'UNDEFINED';
+    CharonErrorState[CharonErrorState["NO_ERROR"] = 0] = "NO_ERROR";
+    CharonErrorState[CharonErrorState["AUTH_FAILED"] = 1] = "AUTH_FAILED";
+    CharonErrorState[CharonErrorState["PEER_AUTH_FAILED"] = 2] = "PEER_AUTH_FAILED";
+    CharonErrorState[CharonErrorState["LOOKUP_FAILED"] = 3] = "LOOKUP_FAILED";
+    CharonErrorState[CharonErrorState["UNREACHABLE"] = 4] = "UNREACHABLE";
+    CharonErrorState[CharonErrorState["GENERIC_ERROR"] = 5] = "GENERIC_ERROR";
+    CharonErrorState[CharonErrorState["PASSWORD_MISSING"] = 6] = "PASSWORD_MISSING";
+    CharonErrorState[CharonErrorState["CERTIFICATE_UNAVAILABLE"] = 7] = "CERTIFICATE_UNAVAILABLE";
+    CharonErrorState[CharonErrorState["UNDEFINED"] = 8] = "UNDEFINED";
 })(CharonErrorState || (CharonErrorState = {}));
 const stateChanged = new NativeEventEmitter(NativeModules.RNIpSecVpn);
+// receive state change from VPN service.
 export const STATE_CHANGED_EVENT_NAME = 'stateChanged';
+// remove change listener
 export const removeOnStateChangeListener = (stateChangedEvent) => {
-  stateChangedEvent.remove();
+    stateChangedEvent.remove();
 };
+// set a change listener
 export const onStateChangedListener = (callback) => {
-  return stateChanged.addListener(STATE_CHANGED_EVENT_NAME, (e) => callback(e));
+    return stateChanged.addListener(STATE_CHANGED_EVENT_NAME, (e) => callback(e));
 };
+// prepare for vpn connection.
+//
+// android:
+//   for first connection it will show a dialog to ask for permission.
+//   when your connection was interrupted by another VPN connection,
+//   you should prepare again before reconnect.
+//   also if activity isn't running yet,
+//   the activity can be null and will raise an exception
+//   in this case prepare should be called once again when the activity is running.
+//
+// ios:
+//   create a watch for state change
+//   does not raise anything
 export const prepare = NativeModules.RNIpSecVpn.prepare;
+// connect to VPN.
+export var NEVPNIKEv2CertificateType;
+(function (NEVPNIKEv2CertificateType) {
+    NEVPNIKEv2CertificateType[NEVPNIKEv2CertificateType["RSA"] = 1] = "RSA";
+    NEVPNIKEv2CertificateType[NEVPNIKEv2CertificateType["ECDSA256"] = 2] = "ECDSA256";
+    NEVPNIKEv2CertificateType[NEVPNIKEv2CertificateType["ECDSA384"] = 3] = "ECDSA384";
+    NEVPNIKEv2CertificateType[NEVPNIKEv2CertificateType["ECDSA521"] = 4] = "ECDSA521";
+    NEVPNIKEv2CertificateType[NEVPNIKEv2CertificateType["ed25519"] = 5] = "ed25519";
+})(NEVPNIKEv2CertificateType || (NEVPNIKEv2CertificateType = {}));
 export const connect = (name, address, username, password, secret, disapleOnSleep) => {
-  if (Platform.OS == 'ios') {
-    return NativeModules.RNIpSecVpn.connect(name, address || '', username || '', password || '', secret || '', disapleOnSleep);
-  } else {
-    return NativeModules.RNIpSecVpn.connect(address || '', username || '', password || '');
-  }
+    if (Platform.OS == 'ios') {
+        return NativeModules.RNIpSecVpn.connect(name, address || '', username || '', password || '', secret || '', disapleOnSleep);
+    }
+    else {
+        return NativeModules.RNIpSecVpn.connect(address || '', username || '', password || '');
+    }
 };
-
-export const saveConfig = (name, address, username, password, secret) => {
-  if (Platform.OS == 'ios') {
-    return NativeModules.RNIpSecVpn.saveConfig(name, address || '', username || '', password || '', secret || '');
-  } else {
-    return NativeModules.RNIpSecVpn.connect(address || '', username || '', password || '');
-  }
+export const saveConfig = (config, address, username, password, secret) => {
+    if (Platform.OS == 'ios') {
+        return NativeModules.RNIpSecVpn.saveConfig(config, address || '', username || '', password || '', secret || '');
+    }
+    else {
+        return NativeModules.RNIpSecVpn.connect(address || '', username || '', password || '');
+    }
 };
-
+// get current state
 export const getCurrentState = NativeModules.RNIpSecVpn.getCurrentState;
 export const getConnectionTimeSecond = NativeModules.RNIpSecVpn.getConnectionTimeSecond;
+// get current error state from `VpnStateService`. (Android only will recieve no error on ios)
+// when [VpnState.genericError] is receivedon android, details of error can be
+// inspected by [CharonErrorState].
 export const getCharonErrorState = NativeModules.RNIpSecVpn.getCharonErrorState;
+// disconnect and stop VPN service.
+// does not raise any exception
 export const disconnect = NativeModules.RNIpSecVpn.disconnect;
 export default NativeModules.RNIpSecVpn;
\ No newline at end of file
diff --git a/node_modules/react-native-vpn-ipsec/src/index.js.map b/node_modules/react-native-vpn-ipsec/src/index.js.map
index 06532ff..e5ef816 100644
--- a/node_modules/react-native-vpn-ipsec/src/index.js.map
+++ b/node_modules/react-native-vpn-ipsec/src/index.js.map
@@ -1 +1,10 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,+CAAsF;AAGtF,IAAY,QAOX;AAPD,WAAY,QAAQ;IAClB,uDAAY,CAAA;IACZ,mDAAU,CAAA;IACV,iDAAS,CAAA;IACT,yDAAa,CAAA;IACb,uDAAY,CAAA;IACZ,6CAAO,CAAA;AACT,CAAC,EAPW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAOnB;AAID,IAAY,gBAUX;AAVD,WAAY,gBAAgB;IAC1B,+DAAQ,CAAA;IACR,qEAAW,CAAA;IACX,+EAAgB,CAAA;IAChB,yEAAa,CAAA;IACb,qEAAW,CAAA;IACX,yEAAa,CAAA;IACb,+EAAgB,CAAA;IAChB,6FAAuB,CAAA;IACvB,iEAAS,CAAA;AACX,CAAC,EAVW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAU3B;AAED,MAAM,YAAY,GAAuB,IAAI,iCAAkB,CAAC,4BAAa,CAAC,UAAU,CAAC,CAAC;AAG7E,QAAA,wBAAwB,GAAW,cAAc,CAAC;AAGxD,MAAM,2BAA2B,GAAqD,CAAC,iBAAiB,EAAE,EAAE;IACjH,iBAAiB,CAAC,MAAM,EAAE,CAAC;AAC7B,CAAC,CAAC;AAFW,QAAA,2BAA2B,+BAEtC;AAGK,MAAM,sBAAsB,GAER,CAAC,QAAQ,EAAE,EAAE;IACtC,OAAO,YAAY,CAAC,WAAW,CAAC,gCAAwB,EAAE,CAAC,CAAqD,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACpI,CAAC,CAAC;AAJW,QAAA,sBAAsB,0BAIjC;AAeW,QAAA,OAAO,GAAwB,4BAAa,CAAC,UAAU,CAAC,OAAO,CAAC;AAOtE,MAAM,OAAO,GAOC,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE,CACjF,4BAAa,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,EAAE,QAAQ,IAAI,EAAE,EAAE,QAAQ,IAAI,EAAE,EAAE,MAAM,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC;AARzG,QAAA,OAAO,WAQkG;AAE/G,MAAM,UAAU,GAOF,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE,CACjF,4BAAa,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,EAAE,QAAQ,IAAI,EAAE,EAAE,QAAQ,IAAI,EAAE,EAAE,MAAM,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC;AARzG,QAAA,UAAU,cAQ+F;AAGzG,QAAA,eAAe,GAA4B,4BAAa,CAAC,UAAU,CAAC,eAAe,CAAC;AAKpF,QAAA,mBAAmB,GAAoC,4BAAa,CAAC,UAAU,CAAC,mBAAmB,CAAC;AAIpG,QAAA,UAAU,GAAwB,4BAAa,CAAC,UAAU,CAAC,UAAU,CAAC;AAEnF,kBAAe,4BAAa,CAAC,UAAU,CAAC"}
\ No newline at end of file
+{
+    "version": 3,
+    "file": "index.d.ts",
+    "sourceRoot": "",
+    "sources": [
+        "../../src/index.ts"
+    ],
+    "names": [],
+    "mappings": "AAAA,OAAO,EAAqC,mBAAmB,EAAY,MAAM,cAAc,CAAC;AAGhG,oBAAY,QAAQ;IAClB,OAAO,IAAA;IACP,YAAY,IAAA;IACZ,UAAU,IAAA;IACV,SAAS,IAAA;IACT,WAAW,IAAA;IACX,aAAa,IAAA;CACd;AAID,oBAAY,gBAAgB;IAC1B,QAAQ,IAAA;IACR,WAAW,IAAA;IACX,gBAAgB,IAAA;IAChB,aAAa,IAAA;IACb,WAAW,IAAA;IACX,aAAa,IAAA;IACb,gBAAgB,IAAA;IAChB,uBAAuB,IAAA;IACvB,SAAS,IAAA;CACV;AAKD,eAAO,MAAM,wBAAwB,EAAE,MAAuB,CAAC;AAG/D,eAAO,MAAM,2BAA2B,EAAE,CAAC,iBAAiB,EAAE,mBAAmB,KAAK,IAErF,CAAC;AAGF,eAAO,MAAM,sBAAsB,EAAE,CACnC,QAAQ,EAAE,CAAC,KAAK,EAAE;IAAE,KAAK,EAAE,QAAQ,CAAC;IAAC,WAAW,EAAE,gBAAgB,CAAA;CAAE,KAAK,IAAI,KAC1E,mBAEJ,CAAC;AAeF,eAAO,MAAM,OAAO,EAAE,MAAM,OAAO,CAAC,IAAI,CAAoC,CAAC;AAI7E,oBAAY,yBAAyB;IACnC,GAAG,IAAI;IACP,QAAQ,IAAI;IACZ,QAAQ,IAAI;IACZ,QAAQ,IAAI;IACZ,OAAO,IAAI;CACZ;AAED,MAAM,WAAW,uCAAuC;IAEtD;;;;;;;;;;;OAWG;IACH,mBAAmB,EAAE,MAAM,CAAA;IAE3B;;;;;;;;;OASG;IACH,kBAAkB,EAAE,MAAM,CAAA;IAC1B;;;;;;;;;;;;;;;;;OAiBG;IACH,kBAAkB,EAAE,MAAM,CAAA;IAG1B,eAAe,EAAE,MAAM,CAAA;CAGxB;AAED,MAAM,WAAW,gBAAgB;IAC/B,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,OAAO,GAAG,OAAO,CAAA;IACvB;;;;OAIG;IACH,oBAAoB,EAAE,MAAM,CAAA;IAC5B,OAAO,EAAE,MAAM,CAAA;IACf,QAAQ,EAAE,MAAM,CAAA;IAChB,QAAQ,EAAE,MAAM,CAAA;IAChB,MAAM,CAAC,EAAE,MAAM,CAAA;IACf,YAAY,CAAC,EAAE,MAAM,CAAA;IACrB,gBAAgB,CAAC,EAAE,MAAM,CAAA;IACzB,eAAe,CAAC,EAAE,MAAM,CAAA;IAExB,eAAe,CAAC,EAAE,yBAAyB,CAAA;IAC3C,gCAAgC,CAAC,EAAE,uCAAuC,CAAA;IAC1E,kCAAkC,CAAC,EAAE,uCAAuC,CAAA;CAE7E;AAED,eAAO,MAAM,OAAO,EAAE,CACpB,MAAM,EAAE,gBAAgB,EACxB,OAAO,EAAE,MAAM,EACf,QAAQ,EAAE,MAAM,EAChB,QAAQ,EAAE,MAAM,EAChB,MAAM,EAAE,MAAM,EACd,cAAc,EAAE,OAAO,KACpB,OAAO,CAAC,IAAI,CAMhB,CAAC;AAEF,eAAO,MAAM,UAAU,EAAE,CAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,KAAK,OAAO,CAAC,IAAI,CAYvI,CAAC;AAGF,eAAO,MAAM,eAAe,EAAE,MAAM,OAAO,CAAC,QAAQ,CAA4C,CAAC;AAEjG,eAAO,MAAM,uBAAuB,EAAE,MAAM,OAAO,CAAC,MAAM,CAAoD,CAAC;AAK/G,eAAO,MAAM,mBAAmB,EAAE,MAAM,OAAO,CAAC,gBAAgB,CAAgD,CAAC;AAIjH,eAAO,MAAM,UAAU,EAAE,MAAM,OAAO,CAAC,IAAI,CAAuC,CAAC;;AAEnF,wBAAwC"
+}
\ No newline at end of file
diff --git a/node_modules/react-native-vpn-ipsec/src/index.ts b/node_modules/react-native-vpn-ipsec/src/index.ts
index 11cb939..eefa32b 100644
--- a/node_modules/react-native-vpn-ipsec/src/index.ts
+++ b/node_modules/react-native-vpn-ipsec/src/index.ts
@@ -1,4 +1,4 @@
-import { NativeEventEmitter, NativeModules, EmitterSubscription, Platform } from 'react-native';
+import { EmitterSubscription, NativeEventEmitter, NativeModules, Platform } from 'react-native';
 
 // the generic VPN state for all platforms.
 export enum VpnState {
@@ -58,8 +58,92 @@ export const prepare: () => Promise<void> = NativeModules.RNIpSecVpn.prepare;
 
 // connect to VPN.
 
+export enum NEVPNIKEv2CertificateType {
+  RSA = 1,
+  ECDSA256 = 2,
+  ECDSA384 = 3,
+  ECDSA521 = 4,
+  ed25519 = 5
+}
+
+export interface NEVPNIKEv2SecurityAssociationParameters {
+
+  /**
+   *case algorithmDES = 1
+  case algorithm3DES = 2
+  case algorithmAES128 = 3
+  case algorithmAES256 = 4
+  case algorithmAES128GCM = 5
+  case algorithmAES256GCM = 6
+  case algorithmChaCha20Poly1305 = 7
+   *
+   * @type {number}
+   * @memberof NEVPNIKEv2SecurityAssociationParameters
+   */
+  encryptionAlgorithm: number
+
+  /**
+   *case SHA96 = 1
+case SHA160 = 2
+case SHA256 = 3
+case SHA384 = 4
+case SHA512 = 5
+   *
+   * @type {number}
+   * @memberof NEVPNIKEv2SecurityAssociationParameters
+   */
+  integrityAlgorithm: number
+  /**
+   *case groupInvalid = 0
+case group1 = 1
+case group2 = 2
+case group5 = 5
+case group14 = 14
+case group15 = 15
+case group16 = 16
+case group17 = 17
+case group18 = 18
+case group19 = 19
+case group20 = 20
+case group21 = 21
+case group31 = 31
+   *
+   * @type {number}
+   * @memberof NEVPNIKEv2SecurityAssociationParameters
+   */
+  diffieHellmanGroup: number
+
+
+  lifetimeMinutes: number
+
+
+}
+
+export interface VPNConfigOptions {
+  name: string
+  type: "ipsec" | "ikev2"
+  /**
+   * case none = 0
+    case certificate = 1
+    case sharedSecret = 2
+   */
+  authenticationMethod: number
+  address: string
+  username: string
+  password: string
+  secret?: string
+  identityData?: string
+  remoteIdentifier?: string
+  localIdentifier?: string
+  /* config options for ikev2 vpn type */
+  certificateType?: NEVPNIKEv2CertificateType
+  ikeSecurityAssociationParameters?: NEVPNIKEv2SecurityAssociationParameters
+  childSecurityAssociationParameters?: NEVPNIKEv2SecurityAssociationParameters
+
+}
+
 export const connect: (
-  name: string,
+  config: VPNConfigOptions,
   address: string,
   username: string,
   password: string,
@@ -73,15 +157,15 @@ export const connect: (
   }
 };
 
-export const saveConfig: (name: string, address: string, username: string, password: string, secret: string) => Promise<void> = (
-  name,
+export const saveConfig: (config: VPNConfigOptions, address: string, username: string, password: string, secret: string) => Promise<void> = (
+  config,
   address,
   username,
   password,
   secret
 ) => {
   if (Platform.OS == 'ios') {
-    return NativeModules.RNIpSecVpn.saveConfig(name, address || '', username || '', password || '', secret || '');
+    return NativeModules.RNIpSecVpn.saveConfig(config, address || '', username || '', password || '', secret || '');
   } else {
     return NativeModules.RNIpSecVpn.connect(address || '', username || '', password || '');
   }
